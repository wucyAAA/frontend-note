alert("--------");
document.write("------");
console.log("------");
<script  type="text/javascript" src="--.js"></script>
字面量 变量
var age=50;
标识符：有自己自主命名的都可以称之为标识符。
标识符只能以数字 字母 _ $组成，且不能以数字开头，还不能使用关键字 保留字。
单引号里不能用单引号，双引号也一样不行。
转义字符   \  。
Number.MAX_VALUE       Number.MIN_VALUE
同typeof检查变量的类型。
调用toString方法
var a=3; a=a.toString();
调用String函数，要传参
var b=null;   b=String(b);
 Number();
下面这两种方式主要用来对付字符串的
paresInt()   paresflaot()
0x开头:16进制 0开头:8进制 0b开头：2进制------> paresInt(a,10）
数字转换为布尔类型:除了0和NaN其余的都是true。
字符串转换为布尔类型:除了 空串 其余都是true。
null undefined 转换为布尔类型为false。
Object 转换为布尔类型为true。
a=+a可以将任何数据类型转换为数值类型。
a++等于原变量的值(自增前的值) ++a等于新值(自增后的值)
a +=5----->a=a+5(+=连在一起）
对于非数值进行比较时，会将其转换为数字再进行比较，如果符号两侧都是字符串时，
不会将其转换为数字进行比较，而会分别比较字符串中字符的unicode编码。（如果第一位一样就会继续比下一位）"1">"2"
再script写unicode编码 “\u2620” 在网页上写Unicode编码&#10进制数;
(==   != ) 会自动转换类型再比较     （===   !==）不会转换类型直接比较
NaN 不和任何值相等包括它自身，可以用isNaN函数判断，Undefined衍生自null所以这两个值相等
条件表达式？语句1：语句2
prompt函数的返回值时String类型
switch（）{
       case 语句:
         输出------；
      default：
      输出------;
}
console.time(计时器的名字)
console.timeEnd(计时器的名字)
lable:循环语句  break lable； lable(指循环的名字)
Math.sqart();
Js中的变量都是保存到栈内存中的，基本数据类型的值直接在栈内存中储存，
值与值之间时独立存在的，修改一个变量不会影响到其它的变量。
对象是保存到堆内存中的，没创建一个新的对象，就会在堆内存那种开辟一个新的空间，
而变量保存的时对象的内存地址(对象的引用)，如果两个变量保存的是同一个对象
的引用，当通过一个变量修改属性时，另一个也会受到影响。
对象["属性名"]=属性值 例子 obj["ds222222"]=789;
对象字面量：例子： var obj={ name:"wucy", age:18, test:{} }
声明函数方法一: var fun1=new Function("代码");
声明函数方法二：function fun2(形参){}
声明函数方法三：var fun3=function(形参){};
实参可以是对象也可以是函数，函数也是对象。
形参写啥时啥
立即执行函数：（function(){}）()；
对象的属性值可以是任何的数据类型，也可以是函数。
方法：var obj={ age:11, name:"wucy", fangfa:function(){} }
枚举对象中的属性值，使用for...in语句，for(var 变量，in 对象）{}
直接编写在script标签中的js代码，都在全局作用域，全局作用域在页面打开是创建，在页面关闭时销毁，
在全局作用域中有一个全局对象window，在全局作用域中创建的变量都会作为window的属性保存
创建的函数都会作为window对象的方法保存。
变量声明提前，使用var声明的变量，会在所有的代码执行之前被声明，但是不会被赋值，
如果声明变量时不使用var关键字，则变量不会声明提前。
     函数声明提前，使用函数声明形式创建的函数function函数(){},他会在所有代码执行钱被创建
所以可以在函数声明前来调用函数，使用函数表达式创建的函数，不会被声明提前，所以不能再声明前调用。
      在函数作用域操作一个变量时，会先在自身作用域中寻找，如果有就直接使用，如果没有则
向上一级作用域中寻找，知到找到全局作用域，如果还没找到就会报错RefereError。
在函数作用域中也会有声明提前！
     在函数中访问全局变量可以使用window对象，在函数中不使用var声明的变量都会成为全局变量。
    浏览器在调用函数每次都会向函数内部传递进一个隐含参数-->this,  this指向的是一个对象
这个对象我们称为函数执行的上下文对象，根据函数的调用方式不同，this会指向不同的对象
1，一函数的形式调用，this永远都是window。
2，以方法的形式调用时，this就是调用方法的那个对象。
3.当以构造函数的形式调用时，this就是新创建的那个对象。
使用instanceof可以检查一个对象是否是一个类的实列 edg: 对象 instanceof  构造函数
将函数定义在全局作用域中，污染了全局作用域的命名空间，而且定义在全局作用域中也很不安全。
！！！尽量不在全局作用域中定义
函数也是个对象，一切皆对象。
函数对象会有prototype属性访问原型对象。
我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype
这个属性对应着一个对象，这个对象是我们所谓的原型对象
如果函数作为普通函数调用prototype没有任何作用
当函数以构造函数的形式调用时，它所创建的对象中会有一个隐含的属性指向该构造函数的原型对象，
我们可以通过__proto__来访问该属性，原型页有原型，Object也有原型，可以用 “属性” in 对象 判断该属性是否属于该对象
也可以用 hasOwnProperty()方法来判断
shift()===删除数组第一个元素  返回值=被删除的元素
unshift()===在数组开头添加新元素  返回值=元素个数
push()===在数组末尾添加新元素    返回值=元素个数
pop()====删除数组最后一个元素 返回值=被删除的元素
forEach() 方法参数是一个函数，有浏览器调用，称为回调函数，函数的形参为(value,index,arr)
call()和apply()方法都是函数对象的方法，通过函数对象来调用，第一个参数为对象，这个对象
将会成为函数执行时的this。call()方法可以将实参在对象之后依次传递,apply()方法需要将实参
封装到一个数字中统一传递。
------------------------------------------------------------------------------------------------------------------
调用函数时会传递一个隐含的参数--->>封装实参的对象 arguments ，arguments是一个类数组对象，
它也可以通过索引来操作数据，也可以获取长度length
在调用函数时，我们所传递的参数丢回在arguments中保存，即使不定义形参，
也可以通过arguments来使用实参
它还有一个属性交callee，对应当前函数对象。
------------------------------------------------------------------------
正则表达式 var reg=new RegExp("参数一正则表达式"，“参数二匹配模式”) i:忽略大小写 g:全局匹配模式
 test() 该方法用于检查一个字符串是符合正则表达式的规则。  m:换行匹配
                                                                                             如果在字符串中，遇到换行，则会重新计算行首
字面量声明正则表达式 var reg=/正则表达式/匹配模式   a|b=[ab]            [^ab] 除了ab以外的
split()将字符串拆分成数组,不设置全局也会拆分全部
search()----->str.search(/a[bef]c/)  只会找到第一个设置全局没有用
match()-->默认情况下只会找到第一个符合条件的内容，就停止 检索，可以设置正则表达式为全局模式 ，可以设置多个模式，没有顺序ig
str.match(/[a-z]/ig)
replace()         [0-9] 没有10的说法只有 1 与0的说法
{n} 正好出现n次 {m,n} 出现m-n次{m,}m次以上 +至少一个 *0个或多个 ？0个或一个
var reg=/a{3}/    reg=/^a/ 以a开头 reg=/a$/ 以a结尾
\w 数字字母下划线   \W除了数字字母下划线
\d 任意数字  \D除了数字
\s 空格   \S除了空格
\b单词边界  \B除了单词边界     reg=/\bchild\b/ 查找独立的child。
/^\s+|\s+$/g 去除字符串前后的空格
写邮件等等正则表达式时前后需要加开头 结尾符号。
day7