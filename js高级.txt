5种基本数据类型:string number  boolean undefined  null
3种引用数据类型：Object array function
typeof返回值有几种
答：string number boolean undefined object function
    特殊：null和array的返回值为object
A instanceof B - -->A是否是B的实例。

call和apply用于修改this指向的对象，自动调用修改完this指向的函数。
test.call(指定的this指向对象，参数)；apply以数组的形式传参。

IIFE全称Immediately-Invoked Function Expression立即调用函数表达式
别名：匿名函数自调用
作用：隐藏内部实现，不污染外部命名空间
例：(function(){
               console.log(“立即执行函数调用”);
     })()   ‘括号可以在里面’
 
对象.属性，来调用属性的话， 如果没有该属性不会报错，只会显示undefined，
var a=123; a(); 报错：a is not a function。

new操作符都干了哪些事情
    1. 创建一个空对象
    2. 将this指向该空对象
    3. 执行函数
    4. 将执行的结果返回

debugger; 该语句设置断点

1.代码分类：全局代码，函数代码
2.执行上下文分类：全局执行上下文，函数执行上下文
3.执行上下文是一个抽象的概念，用于描述代码从被解析到代码执行时候所处环境的工作机制
js引擎工作机制(js代码正式执行之前js引擎会先做预解析的工作，预解析工作内容如下):
1.创建执行上下文环境
2.在当前的执行环境中创建变量对象，用于收集：变量，函数，函数的参数(arguments)
3.确认this的指向 4.创建作用域链。

js解释型语言，解释一行执行一行，所以会设计js引擎在js代码正式执行前做预解析工作，提高运行速度。

手写闭包：
function fn1() {
	var a=2
function fn2() {
	a++
	console.log(a)
 }
     return fn2
 }
	var f=fn1();
	f()

===================
var obj={};
obj.name='kobe';
obj['content-type']='zzzz';
console.log（obj['content-type'] ）；
=======================
对象的key必须是字符串

原型继承：子类的原型 成为 父类的实例


js是单线程的，代码会阻塞。用alert证明js是单线程的。
js代码分两种 
          同步代码
  	1.同步代码会阻塞后续代码的执行
	2.同步没有回调
           异步代码
	 1.异步代码非阻塞
	 2.异步有回调
 千万不要在定时器后面写 运算时间特别长的代码段，这样会导致定时器不准时。

JSON.stringify(obj/arr)   js对象（数组）转换为json对象（数组）
JSON.parse(json)     json对象（数组）转换为js对象（数组）

for in 枚举对象的时候除了能够枚举自身的属性之外还会枚举原型的属性

数组的方法扩展  
indexOf（value）/ lastIndexOf（value）
forEach（function(item,index)  {  }  ）
map(function(item,index）{  }  )  map和filter都会返回一个新数组
 filter(function(item,index）{  }  )  //里面的语句：return index>3;

Function的方法 
call() apply() 这两个是立即调用函数

bind()是将函数返回                	setTimeout(function(){
			       console.log(this)
			}.bind(obj),1000)			
		！！！注意bind的位置

谁调用了该函数this就指向谁 可以打印this来获取调用函数的对象

Object.create(proptype,[descriptors])
以指定对象为原型创建新的对象
为新的对象指定新的属性，并对属性进行描述 value writable configurable enumerable 后3个为布尔值
Object.defineProperties(object,descriptors)
为指定对象定义扩展多个属性
get:来获取当前属性值的回调函数
set:修改当前属性值的触发回调函数（详细见Hbuilder es5目录下object扩展）

不借助第三方变量交换ab的值
 var a=2; var b=3; a=a+b;  b=a-b;  a=a-b;
es6
let关键字 块级作用域  有声明提前但不能提前使用

对象的解构赋值真正实现的是：按需索取 通过key来获取value
数组的解构赋值真正实现的是：通过index来获取value      let arr=[1,2]        let[a,b]=arr
解构赋值的应用：利用函数的形参结构实参   

模板字符串：模板字符串必须使用 ` `包含       变化的部分使用${****}
对象的简写方法


箭头函数没有自己的this，箭头函数的this不是调用的时候决定的，而是在定义的时候处在的
上下文对象就是它的this。
扩展理解：箭头函数的this看外层是否有函数，如果有，外层函数的this就是内部箭头函数的this
如果没有则this是window。

可以给函数设置默认参数 ，不会影响实参传值。
null的类型为object

字符串扩展
includes(str):判断是否包含指定的字符串
startsWith(str):判断是否以指定字符串开头
endsWith(str):判断是否以指定字符串结尾
repeat(count):重复指定次数

数值扩展
1. 二进制与八进制数值表示法: 二进制用0b, 八进制用0o
2. Number.isFinite(i) : 判断是否是有限大的数
3. Number.isNaN(i) : 判断是否是NaN
4. Number.isInteger(i) : 判断是否是整数
5. Number.parseInt(str) : 将字符串转换为对应的数值
6. Math.trunc(i) : 直接去除小数部分

数组扩展
1. Array.from(v) : 将伪数组对象或可遍历对象转换为真数组
2. Array.of(v1, v2, v3) : 将一系列值转换成数组
3. find(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素
4. findIndex(function(value, index, arr){return true}) : 找出第一个满足条件返回true的元素下标

Object.is(v1,v2) 判断两个数据是否完全相等
Object.assign（target，source1，source2....)将源对象的属性值复制到目标对象上
直接操作__proto__属性
let obj2={} obj2.__proto__=obj1;

Set Map数据结构
1. Set容器 : 无序不可重复的多个value的集合体
  * Set()
  * Set(array)
  * add(value)
  * delete(value)
  * has(value)
  * clear()
  * size
2. Map容器 : 无序的 key不重复的多个key-value的集合体
  * Map()
  * Map(array)
  * set(key, value)//添加
  * get(key)
  * delete(key)
  * has(key)
  * clear()
  * size

for of
for(let value of target){}循环遍历
  1. 遍历数组
  2. 遍历Set
  3. 遍历Map
  4. 遍历字符串
  5. 遍历伪数组

深度克隆
1、数据类型：
    * 数据分为基本的数据类型(String, Number, boolean, Null, Undefined)和对象数据类型
    - 基本数据类型：
      特点： 存储的是该对象的实际数据
    - 对象数据类型：
      特点： 存储的是该对象在栈中引用，真实的数据存放在堆内存里
  2、复制数据
    - 基本数据类型存放的就是实际的数据，可直接复制
      let number2 = 2;
      let number1 = number2;
    - 克隆数据：对象/数组
      1、区别： 浅拷贝/深度拷贝
         判断： 拷贝是否产生了新的数据还是拷贝的是数据的引用
         知识点：对象数据存放的是对象在栈内存的引用，直接复制的是对象的引用
         let obj = {username: 'kobe'}
         let obj1 = obj; // obj1 复制了obj在栈内存的引用
      2、常用的拷贝技术
        1). arr.concat(): 数组浅拷贝
        2). arr.slice(): 数组浅拷贝
        3). JSON.parse(JSON.stringify(arr/obj)): 数组或对象深拷贝, 但不能处理函数数据
        4). 浅拷贝包含函数数据的对象/数组
        5). 深拷贝包含函数数据的对象/数组

对象的key必须是字符串，如果是变量的话会被转为字符串，例如：obj[obj2]=4; obj[0bj3]=5
obj2是个对象会被转为字符串（toString方法） ,结果是5（被覆盖）

for in 可以也遍历数组 输出的是数组的下标

es7
幂运算符**      数组也有includes方法