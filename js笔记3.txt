getBoundingClientRect()获取元素里页面左端的距离  offsetWidth获取元素自身的宽度
设置  **.style.left 时要带单位 'px'

dom 0  和 dom2   有自己独立的事件绑定和解绑方式
dom0事件所有的浏览器都可以使用 
dom2事件 addEventListener() ，第一个参数例如' click' 不能加on。
==============================================
removeEventListener()参数必须一致才能解绑 ，解绑必须把传递进的函数这个参数提出去才行
高级浏览器可以使用  
================================================= 
ie10以下的不能使用，IE10以下给出了另外一种绑定方式；attachEvent(事件类型，事件函数)
标准DOM事件流包含3个阶段，有捕获 再去获取元素 然后冒泡
阻止冒泡： event.stopPropagation();或者event.cancelBubble=true;
事件委派:给爹添加事件，不给元素本身添加，事件发生后通过爹去找，真正发生事件的元素进行处理
可以用 event.target.nodeName='A' 来判断点击的（a)元素是否正确

onmouseenter onmouseleave 如果是一个父子元素模型，对父元素添加移入移出当鼠标
移入父元素里面的子元素的时候，事件并没有移出然后再移入，也就是说事件元素没有切换。
onmouseover onmouseout 这两对之间的区别
如果是一个父子元素模型，对父元素添加移入移出，当鼠标移入父元素里面的子元素的时候，
事件会移出然后再移入，也就是说事件元素会有切换。
window.onresize=function(){} 窗口变化就会执行这个事件
clientX clientY 获取鼠标的坐标是相对于视口
pageX  pageY 获取鼠标的坐标是相对于页面
offsetX  offsetY 获取鼠标的坐标是相对于自身元素

单次定时器 延迟定时器  var timer=setTimeout(function() {} ,5000);定义的timer一般为全局变量
第一个参数时回调函数，也就是你想干嘛。第二个参数是定时时间，单位为毫秒。
清除延迟定时器  clearTimeout(timer);
循环定时器 var timer=null; var num=0; timer=setInterval(function(){
                                                   num++;
			console.log('zzzz');
			if(num==10){
          			    clearInterval(timer);} ,1000)


clientWidth 拿盒子的宽度不带边框    height都一样
offsetWidth拿盒子的宽度带边框
scrollWidth几乎不用

clientLeft
clientTop 打印的是边框的大小
offsetLeft/offsetTop 拿到盒子的水平偏移量和垂直偏移量，其实就是拿的这个元素的定位left或top值
这两个属性只能读取，通常还是要靠style.left/Top 设置定位位置。
overflow：auto/scroll  用来开启滚动条
scrollTop/scrollLeft 拿的是盒子内容向上/左滚动的距离。
禁止系统滚动条 
           html,body{
	height:100%;
	overflow:hidden;

}
				
dom0事件取消默认行为：return false;
dom2事件取消默认行为：event.preventDefault();

元素发生事件之后，鼠标的所有事件行为全部都被捕获到该元素身上
box.setCapture && box.setCapture();
取消：box.releaseCapture && box.releaseCapture();

计算元素到视口上方和左边的距离 getBoumdingClientRect()

滚动条的高度 / 屏幕的高度 = 屏幕的高度 / 内容的高度 = 滚动条的移动距离 / 内容的滚动距离 
